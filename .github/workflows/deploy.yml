name: Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          if [ -d "out" ]; then
            echo "✅ out/ directory exists"
            ls -la out/
            echo "Total files: $(find out -type f | wc -l)"
          else
            echo "❌ out/ directory not found"
            exit 1
          fi

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz out/
          echo "Package size: $(du -h deployment.tar.gz)"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to server
        run: |
          # バックアップの作成
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            sudo mkdir -p /var/www/backups
            if [ -d '/var/www/html' ] && [ '\$(ls -A /var/www/html)' ]; then
              sudo cp -r /var/www/html /var/www/backups/html-\$(date +%Y%m%d-%H%M%S)
              echo 'Backup created'
            else
              echo 'No existing content to backup'
            fi
          "

          # デプロイメントパッケージを転送
          scp -i ~/.ssh/id_rsa deployment.tar.gz ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:/tmp/

          # サーバーでファイルを展開
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd /tmp
            tar -xzf deployment.tar.gz
            sudo rm -rf /var/www/html/*
            sudo cp -r out/* /var/www/html/
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html
            echo 'Files deployed successfully'
            sudo systemctl reload apache2
            echo 'Apache reloaded'
          "

      - name: Cleanup
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            rm -f /tmp/deployment.tar.gz
            sudo find /var/www/backups -name 'html-*' -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            echo 'Cleanup completed'
          "

      - name: Health check
        run: |
          sleep 10
          echo 'Testing HTTP access...'
          curl -f http://${{ secrets.GCP_HOST }}/ || echo 'HTTP test failed'
          echo 'Testing HTTPS access...'
          curl -f https://yusuke-kim.com/ || echo 'HTTPS test failed'

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            LATEST_BACKUP=\$(ls -t /var/www/backups/ 2>/dev/null | head -1)
            if [ -n \"\$LATEST_BACKUP\" ]; then
              sudo rm -rf /var/www/html/*
              sudo cp -r /var/www/backups/\$LATEST_BACKUP/* /var/www/html/
              sudo chown -R www-data:www-data /var/www/html
              sudo systemctl reload apache2
              echo 'Rollback completed'
            else
              echo 'No backup found for rollback'
            fi
          "
