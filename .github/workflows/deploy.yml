name: Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          if [ -d ".next" ]; then
            echo "✅ .next/ directory exists"
            echo "Total files: $(find .next -type f | wc -l)"
          else
            echo "❌ .next/ directory not found"
            exit 1
          fi

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz .next/ package.json package-lock.json public/
          echo "Package size: $(du -h deployment.tar.gz)"

      # 簡素化されたSSH設定
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # SSH鍵の設定（適切な権限で）
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 基本的なSSH設定
          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.GCP_HOST }}
            User ${{ secrets.GCP_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 3
            LogLevel ERROR
          EOF
          chmod 600 ~/.ssh/config

          # ホストキーを事前に取得（エラーハンドリング強化）
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || {
            echo "Warning: Could not add host key, continuing with StrictHostKeyChecking=no"
          }

      # 接続テスト
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh deploy-server "echo 'SSH connection successful'; whoami; pwd" || {
            echo "SSH connection failed"
            exit 1
          }

      # デプロイメントファイル転送
      - name: Transfer deployment files
        run: |
          echo "Transferring deployment package..."
          scp -o ConnectTimeout=30 deployment.tar.gz deploy-server:/tmp/ || {
            echo "File transfer failed"
            exit 1
          }

      # サーバー上でのデプロイ処理
      - name: Deploy application
        timeout-minutes: 15
        run: |
          ssh deploy-server << 'DEPLOY_SCRIPT'
          set -e

          echo "=== Starting deployment process ==="
          echo "User: $(whoami)"
          echo "Time: $(date)"

          # 1. バックアップ作成
          if [ -d "/var/www/yusuke-kim" ] && [ "$(ls -A /var/www/yusuke-kim 2>/dev/null)" ]; then
            echo "Creating backup..."
            sudo mkdir -p /var/www/backups
            sudo cp -r /var/www/yusuke-kim /var/www/backups/yusuke-kim-$(date +%Y%m%d-%H%M%S)
            echo "Backup created"
          fi

          # 2. 現在のアプリケーション停止
          echo "Stopping current application..."
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          pm2 stop yusuke-kim 2>/dev/null || echo "No existing PM2 process found"
          pm2 delete yusuke-kim 2>/dev/null || echo "No existing PM2 process to delete"

          # 3. デプロイメントディレクトリ準備
          echo "Preparing deployment directory..."
          sudo mkdir -p /var/www/yusuke-kim
          sudo chown -R $USER:www-data /var/www/yusuke-kim

          # 4. 新しいファイル展開
          echo "Extracting new files..."
          cd /tmp
          rm -rf yusuke-kim-temp
          mkdir yusuke-kim-temp
          cd yusuke-kim-temp
          tar -xzf /tmp/deployment.tar.gz

          # ファイル確認
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found!"
            exit 1
          fi

          # 5. ファイルコピー
          echo "Copying files to web directory..."
          sudo rm -rf /var/www/yusuke-kim/*
          sudo cp -r ./* /var/www/yusuke-kim/
          sudo chown -R $USER:www-data /var/www/yusuke-kim
          sudo chmod -R 755 /var/www/yusuke-kim

          # 6. nvmとNode.js環境の確認
          echo "Setting up Node.js environment..."
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

          # Node.jsバージョン確認
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"

          # 依存関係インストール
          echo "Installing dependencies..."
          cd /var/www/yusuke-kim
          npm ci --omit=dev --no-audit --no-fund --silent

          # 7. 環境変数設定
          echo "Setting up environment variables..."
          cat > .env.production.local << ENV_EOF
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          NODE_ENV=production
          PORT=3000
          ENV_EOF

          # 8. アプリケーション起動
          echo "Starting application..."
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          NODE_ENV=production pm2 start npm --name "yusuke-kim" -- start
          pm2 save

          # 9. ヘルスチェック
          echo "Performing health check..."
          sleep 10

          # NVM環境を再読み込み
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          # PM2プロセス確認
          if ! pm2 list | grep -q "yusuke-kim.*online"; then
            echo "❌ Application failed to start"
            pm2 logs yusuke-kim --lines 20
            exit 1
          fi

          # ローカル接続確認
          if curl -f -s http://localhost:3000/ > /dev/null; then
            echo "✅ Application is responding on port 3000"
          else
            echo "⚠️ Application not responding on port 3000"
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            pm2 logs yusuke-kim --lines 10
          fi

          # 10. Apache設定確認とリロード
          echo "Checking Apache configuration..."
          sudo apache2ctl configtest || {
            echo "Apache configuration test failed"
            exit 1
          }

          sudo systemctl reload apache2

          # 11. クリーンアップ
          echo "Cleaning up..."
          rm -rf /tmp/yusuke-kim-temp
          rm -f /tmp/deployment.tar.gz

          # 古いバックアップクリーンアップ（7日以上前）
          find /var/www/backups -name "yusuke-kim-*" -mtime +7 -exec sudo rm -rf {} \; 2>/dev/null || true

          echo "=== Deployment completed successfully ==="
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          pm2 list
          DEPLOY_SCRIPT

      # 外部ヘルスチェック
      - name: External health check
        run: |
          echo "=== External health check ==="
          sleep 15

          # HTTP アクセステスト
          for i in {1..5}; do
            if curl -f -s -I http://${{ secrets.GCP_HOST }}/ > /dev/null; then
              echo "✅ HTTP access successful"
              break
            elif [ $i -eq 5 ]; then
              echo "❌ HTTP access failed after 5 attempts"
              exit 1
            else
              echo "HTTP access attempt $i failed, retrying in 10s..."
              sleep 10
            fi
          done

          # HTTPS アクセステスト（証明書が設定されている場合）
          if curl -f -s -I https://yusuke-kim.com/ > /dev/null; then
            echo "✅ HTTPS access successful"
          else
            echo "⚠️ HTTPS access failed (certificate may not be configured)"
          fi

      # 失敗時の自動ロールバック
      - name: Rollback on failure
        if: failure()
        run: |
          echo "=== Performing rollback ==="
          ssh deploy-server << 'ROLLBACK_SCRIPT'
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          LATEST_BACKUP=$(ls -t /var/www/backups/yusuke-kim-* 2>/dev/null | head -1)

          if [ -n "$LATEST_BACKUP" ]; then
            echo "Rolling back to: $LATEST_BACKUP"
            
            # アプリケーション停止
            pm2 stop yusuke-kim 2>/dev/null || true
            pm2 delete yusuke-kim 2>/dev/null || true
            
            # バックアップから復元
            sudo rm -rf /var/www/yusuke-kim
            sudo cp -r "$LATEST_BACKUP" /var/www/yusuke-kim
            sudo chown -R $USER:www-data /var/www/yusuke-kim
            
            # アプリケーション再起動
            cd /var/www/yusuke-kim
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            NODE_ENV=production pm2 start npm --name "yusuke-kim" -- start
            pm2 save
            
            echo "✅ Rollback completed"
          else
            echo "❌ No backup found for rollback"
          fi
          ROLLBACK_SCRIPT
