name: Safe Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          # Check if package-lock.json is in sync with package.json
          if npm ci --dry-run 2>&1 | grep -q "can only install packages when your package.json and package-lock.json"; then
            echo "⚠️ package-lock.json is out of sync, running npm install to fix"
            npm install
          else
            echo "✅ package-lock.json is in sync, using npm ci"
            npm ci
          fi

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Run tests
        run: npm run test
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Build project (Standalone)
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: npm run build

      - name: Fix standalone static files
        run: |
          echo "=== Fixing standalone static files ==="

          # Copy static files to standalone directory
          if [ -d ".next/static" ] && [ -d ".next/standalone" ]; then
            echo "Copying static files..."
            cp -r .next/static .next/standalone/.next/static
            echo "✅ Static files copied successfully"
            
            # Verify critical files
            if [ -f ".next/standalone/.next/static/css/"*.css ]; then
              echo "✅ CSS files found"
            else
              echo "⚠️ No CSS files found"
            fi
            
            if [ -d ".next/standalone/.next/static/chunks" ]; then
              echo "✅ JavaScript chunks directory found"
              echo "Chunk files: $(ls .next/standalone/.next/static/chunks | wc -l)"
            else
              echo "⚠️ No chunks directory found"
            fi
          else
            echo "❌ Required directories not found"
            exit 1
          fi

      - name: Verify standalone build
        run: |
          echo "=== Verifying standalone build ==="
          if [ -f ".next/standalone/server.js" ]; then
            echo "✅ server.js exists"
          else
            echo "❌ server.js not found"
            exit 1
          fi

          if [ -d ".next/standalone/.next/static" ]; then
            echo "✅ Static directory exists"
            echo "Static files structure:"
            find .next/standalone/.next/static -type d -name "*" | head -20
          else
            echo "❌ Static directory not found"
            exit 1
          fi

          if [ -d ".next/standalone/public" ]; then
            echo "✅ Public directory exists"
          else
            echo "⚠️ Public directory not found, copying..."
            cp -r public .next/standalone/public
            echo "✅ Public directory copied"
          fi

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          if npm ci --dry-run 2>&1 | grep -q "can only install packages when your package.json and package-lock.json"; then
            echo "⚠️ package-lock.json is out of sync, running npm install to fix"
            npm install
          else
            echo "✅ package-lock.json is in sync, using npm ci"
            npm ci
          fi

      - name: Build project (Standalone)
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: npm run build

      - name: Prepare standalone deployment
        run: |
          echo "=== Preparing standalone deployment ==="

          # Fix static files
          if [ -d ".next/static" ] && [ -d ".next/standalone" ]; then
            echo "Copying static files to standalone..."
            cp -r .next/static .next/standalone/.next/static
            
            # Copy public directory if not exists
            if [ ! -d ".next/standalone/public" ]; then
              cp -r public .next/standalone/public
            fi
            
            echo "✅ Standalone preparation complete"
          else
            echo "❌ Build directories not found"
            exit 1
          fi

          # Create deployment info
          echo "{
            \"buildId\": \"$(cat .next/BUILD_ID)\",
            \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"gitCommit\": \"${GITHUB_SHA}\",
            \"gitBranch\": \"${GITHUB_REF_NAME}\"
          }" > .next/standalone/deployment-info.json

      - name: Create deployment package
        run: |
          echo "Creating standalone deployment package..."
          cd .next/standalone

          # Create package with all necessary files
          tar -czf ../../deployment-standalone.tar.gz \
            server.js \
            .next/ \
            public/ \
            node_modules/ \
            package.json \
            deployment-info.json || {
              echo "❌ Failed to create deployment package"
              exit 1
            }

          cd ../..
          echo "✅ Package created successfully"
          echo "Package size: $(du -h deployment-standalone.tar.gz)"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.GCP_HOST }}
            User ${{ secrets.GCP_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            ConnectTimeout 30
            ServerAliveInterval 60
            LogLevel ERROR
          EOF
          chmod 600 ~/.ssh/config

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh deploy-server "echo 'SSH connection successful'; uptime; free -h"

      - name: Transfer deployment files
        run: |
          echo "Transferring standalone deployment package..."
          scp deployment-standalone.tar.gz deploy-server:/tmp/

      - name: Deploy standalone application
        timeout-minutes: 15
        run: |
          ssh deploy-server << 'STANDALONE_DEPLOY'
          set -e

          echo "=== Standalone Deployment Process ==="

          # 1. Environment setup
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          # 2. Stop existing processes
          echo "Stopping existing processes..."
          pm2 stop all 2>/dev/null || echo "No PM2 processes to stop"
          pm2 delete all 2>/dev/null || echo "No PM2 processes to delete"

          # 3. Backup current deployment
          if [ -d "/var/www/yusuke-kim" ] && [ "$(ls -A /var/www/yusuke-kim 2>/dev/null)" ]; then
            echo "Creating backup..."
            sudo mkdir -p /var/www/backups
            sudo cp -r /var/www/yusuke-kim /var/www/backups/yusuke-kim-$(date +%Y%m%d-%H%M%S)
          fi

          # 4. Prepare deployment directory
          sudo rm -rf /var/www/yusuke-kim/*
          sudo mkdir -p /var/www/yusuke-kim
          sudo chown $USER:www-data /var/www/yusuke-kim
          cd /var/www/yusuke-kim

          # 5. Extract standalone deployment
          tar -xzf /tmp/deployment-standalone.tar.gz

          # 6. Verify deployment
          if [ ! -f "server.js" ] || [ ! -f ".next/BUILD_ID" ]; then
            echo "❌ Deployment verification failed"
            exit 1
          fi

          echo "✅ Files extracted successfully"
          echo "BUILD_ID: $(cat .next/BUILD_ID)"
          echo "Deployment info:"
          cat deployment-info.json

          # 7. Set up environment
          cat > .env.production.local << ENV_EOF
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          NODE_ENV=production
          PORT=3000
          ENV_EOF

          # 8. Quick test of standalone server
          echo "Testing standalone server..."
          timeout 30 node server.js &
          TEST_PID=$!

          sleep 15

          if kill -0 $TEST_PID 2>/dev/null; then
            echo "✅ Server startup successful"
            
            # Test endpoints
            if curl -f -s http://localhost:3000/ > /dev/null; then
              echo "✅ Home page responding"
            fi
            
            if curl -f -s http://localhost:3000/api/health > /dev/null; then
              echo "✅ Health check responding"
            fi
            
            kill $TEST_PID
            sleep 3
          else
            echo "❌ Server startup failed"
            exit 1
          fi

          # 9. Start with PM2
          echo "Starting application with PM2..."
          NODE_ENV=production pm2 start server.js --name "yusuke-kim" --env production
          pm2 save
          pm2 startup systemd -u $USER --hp /home/$USER || echo "PM2 startup already configured"

          # 10. Final health check
          sleep 10

          echo "=== Final Health Check ==="
          if pm2 status | grep -q "yusuke-kim.*online"; then
            echo "✅ Application is running"
            
            # Multiple endpoint tests
            ENDPOINTS=("/" "/api/health" "/portfolio/gallery/all" "/_next/static/css/")
            
            for endpoint in "${ENDPOINTS[@]}"; do
              if curl -f -s -o /dev/null -w "%{http_code}" "http://localhost:3000${endpoint}" | grep -q "200\|304"; then
                echo "✅ ${endpoint} - OK"
              else
                echo "⚠️ ${endpoint} - Failed"
              fi
            done
          else
            echo "❌ Application is not running properly"
            pm2 logs yusuke-kim --lines 50
            exit 1
          fi

          echo "=== Deployment completed successfully ==="
          STANDALONE_DEPLOY

      - name: Verify deployment
        run: |
          echo "Waiting for application to stabilize..."
          sleep 15

          echo "Testing production endpoints..."

          # Test main site
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://yusuke-kim.com/)
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
            echo "✅ Main site is accessible (HTTP $HTTP_CODE)"
          else
            echo "❌ Main site returned HTTP $HTTP_CODE"
            exit 1
          fi

          # Test portfolio page
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://yusuke-kim.com/portfolio/gallery/all)
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
            echo "✅ Portfolio page is accessible (HTTP $HTTP_CODE)"
          else
            echo "⚠️ Portfolio page returned HTTP $HTTP_CODE"
          fi

      - name: Cleanup
        if: always()
        run: |
          ssh deploy-server << 'CLEANUP'
          # Remove temporary files
          rm -f /tmp/deployment-standalone.tar.gz

          # Clean old backups (keep last 5)
          if [ -d "/var/www/backups" ]; then
            cd /var/www/backups
            ls -t | grep "yusuke-kim-" | tail -n +6 | xargs -r sudo rm -rf
            echo "✅ Old backups cleaned"
          fi
          CLEANUP
