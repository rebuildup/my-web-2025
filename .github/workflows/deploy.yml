name: Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          if [ -d ".next" ]; then
            echo "✅ .next/ directory exists"
            ls -la .next/
            echo "Total files: $(find .next -type f | wc -l)"
          else
            echo "❌ .next/ directory not found"
            exit 1
          fi

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz .next/ package.json package-lock.json public/
          echo "Package size: $(du -h deployment.tar.gz)"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to server
        run: |
          # バックアップの作成
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            sudo mkdir -p /var/www/backups
            if [ -d '/var/www/my-web-2025' ]; then
              sudo cp -r /var/www/my-web-2025 /var/www/backups/my-web-2025-\$(date +%Y%m%d-%H%M%S)
              echo 'Backup created'
            else
              echo 'No existing content to backup'
            fi
          "

          # デプロイメントパッケージを転送
          scp -i ~/.ssh/id_rsa deployment.tar.gz ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:/tmp/

          # サーバーでファイルを展開とNode.jsセットアップ
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            # Node.jsがインストールされていない場合はインストール
            if ! command -v node &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # PM2がインストールされていない場合はインストール
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi

            # アプリケーションのデプロイ
            cd /tmp
            sudo rm -rf /var/www/my-web-2025
            sudo mkdir -p /var/www/my-web-2025
            tar -xzf deployment.tar.gz -C /var/www/my-web-2025
            cd /var/www/my-web-2025
            sudo npm ci --production
            
            # 環境変数の設定
            sudo bash -c 'cat > /var/www/my-web-2025/.env << EOL
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
            EOL'

            # PM2の設定
            sudo -E pm2 delete my-web-2025 || true
            sudo -E pm2 start npm --name my-web-2025 -- start
            sudo -E pm2 save
            
            # 権限の設定
            sudo chown -R www-data:www-data /var/www/my-web-2025
            sudo chmod -R 755 /var/www/my-web-2025

            echo 'Files deployed successfully'
          "

      - name: Setup Apache reverse proxy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            sudo bash -c 'cat > /etc/apache2/sites-available/my-web-2025.conf << EOL
            <VirtualHost *:80>
                ServerName yusuke-kim.com
                ServerAlias www.yusuke-kim.com

                ProxyPreserveHost On
                ProxyPass / http://localhost:3000/
                ProxyPassReverse / http://localhost:3000/

                ErrorLog \${APACHE_LOG_DIR}/my-web-2025-error.log
                CustomLog \${APACHE_LOG_DIR}/my-web-2025-access.log combined
            </VirtualHost>
            EOL'

            sudo a2enmod proxy
            sudo a2enmod proxy_http
            sudo a2ensite my-web-2025.conf
            sudo systemctl reload apache2
          "

      - name: Cleanup
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            rm -f /tmp/deployment.tar.gz
            sudo find /var/www/backups -name 'my-web-2025-*' -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            echo 'Cleanup completed'
          "

      - name: Health check
        run: |
          sleep 10
          echo 'Testing HTTP access...'
          curl -f http://${{ secrets.GCP_HOST }}/ || echo 'HTTP test failed'
          echo 'Testing HTTPS access...'
          curl -f https://yusuke-kim.com/ || echo 'HTTPS test failed'

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            LATEST_BACKUP=\$(ls -t /var/www/backups/my-web-2025-* 2>/dev/null | head -1)
            if [ -n \"\$LATEST_BACKUP\" ]; then
              sudo -E pm2 delete my-web-2025 || true
              sudo rm -rf /var/www/my-web-2025
              sudo cp -r \$LATEST_BACKUP /var/www/my-web-2025
              cd /var/www/my-web-2025
              sudo -E pm2 start npm --name my-web-2025 -- start
              sudo -E pm2 save
              sudo chown -R www-data:www-data /var/www/my-web-2025
              sudo systemctl reload apache2
              echo 'Rollback completed'
            else
              echo 'No backup found for rollback'
            fi
          "
