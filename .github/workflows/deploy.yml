name: Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          if [ -d ".next" ]; then
            echo "✅ .next/ directory exists"
            echo "Total files: $(find .next -type f | wc -l)"
          else
            echo "❌ .next/ directory not found"
            exit 1
          fi

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz .next/ package.json package-lock.json public/
          echo "Package size: $(du -h deployment.tar.gz)"

      # SSH設定の最適化
      - name: Setup SSH with connection multiplexing
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # SSH鍵の設定
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH設定ファイル（接続多重化対応）
          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.GCP_HOST }}
            User ${{ secrets.GCP_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ControlMaster auto
            ControlPath ~/.ssh/control-%h-%p-%r
            ControlPersist 300
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 3
          EOF
          chmod 600 ~/.ssh/config

          # known_hostsの設定
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts

      # 単一SSH接続で全デプロイ処理を実行
      - name: Deploy to server (Single SSH Session)
        timeout-minutes: 20
        run: |
          # デプロイメントパッケージを転送
          scp deployment.tar.gz deploy-server:/tmp/

          # 単一SSH セッションで全ての処理を実行
          ssh deploy-server << 'EOF'
          set -e  # エラー時に即座に終了

          echo "=== Starting deployment process ==="

          # 現在の実行ユーザーとIPアドレスを表示
          echo "Deploying as user: $(whoami)"
          echo "Server IP: $(hostname -I | awk '{print $1}')"
          echo "GitHub Actions IP: $(curl -s https://ipinfo.io/ip || echo 'unknown')"

          # fail2ban のステータス確認（デバッグ用）
          if command -v fail2ban-client &> /dev/null; then
            echo "Checking fail2ban status..."
            sudo fail2ban-client status sshd 2>/dev/null || echo "fail2ban not configured for sshd"
          fi

          # 1. システム準備
          echo "=== System preparation ==="
          sudo apt-get update -qq

          # Node.js のインストール確認
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi

          # PM2 のインストール確認
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          fi

          # Apache のインストールと設定
          if ! command -v apache2 &> /dev/null; then
            echo "Installing Apache..."
            sudo apt-get install -y apache2
          fi

          # 2. Apache 設定
          echo "=== Configuring Apache ==="

          # 必要なモジュールの有効化
          sudo a2enmod proxy proxy_http rewrite

          # 既存設定の無効化
          sudo a2dissite 000-default.conf 2>/dev/null || true
          sudo a2dissite yusuke-kim.conf 2>/dev/null || true
          sudo a2dissite yusuke-kim-le-ssl.conf 2>/dev/null || true

          # 新しい設定ファイルの作成
          cat > /tmp/apache-config.conf << 'APACHE_EOF'
          <VirtualHost *:80>
              ServerName yusuke-kim.com
              ServerAlias www.yusuke-kim.com
              DocumentRoot /var/www/my-web-2025

              ProxyPreserveHost On
              ProxyPass / http://127.0.0.1:3000/
              ProxyPassReverse / http://127.0.0.1:3000/
              
              # Static files serving (backup)
              ProxyPassMatch ^/(_next/static/.*|/favicon\.ico|/robots\.txt)$ !
              Alias "/_next/static" "/var/www/my-web-2025/.next/static"
              
              ErrorLog ${APACHE_LOG_DIR}/my-web-2025-error.log
              CustomLog ${APACHE_LOG_DIR}/my-web-2025-access.log combined
          </VirtualHost>
          APACHE_EOF
          sudo cp /tmp/apache-config.conf /etc/apache2/sites-available/my-web-2025.conf

          # Apache 設定の有効化
          sudo apache2ctl configtest
          sudo a2ensite my-web-2025.conf
          sudo systemctl restart apache2
          sudo systemctl enable apache2

          # 3. アプリケーションの停止と バックアップ
          echo "=== Application backup ==="

          # 現在のアプリケーションを停止
          if pm2 list | grep -q "my-web-2025"; then
            echo "Stopping current application..."
            pm2 stop my-web-2025
            pm2 delete my-web-2025
          fi

          # バックアップの作成
          sudo mkdir -p /var/www/backups
          if [ -d "/var/www/my-web-2025" ] && [ "$(ls -A /var/www/my-web-2025 2>/dev/null)" ]; then
            echo "Creating backup..."
            sudo cp -r /var/www/my-web-2025 /var/www/backups/my-web-2025-$(date +%Y%m%d-%H%M%S)
            echo "Backup created"
          fi

          # 4. 新しいバージョンのデプロイ
          echo "=== Deploying new version ==="

          # 一時ディレクトリでの展開
          cd /tmp
          rm -rf my-web-2025-temp
          mkdir my-web-2025-temp
          cd my-web-2025-temp

          echo "Extracting deployment package..."
          tar -xzf /tmp/deployment.tar.gz

          # ファイル確認
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found!"
            exit 1
          fi

          # アプリケーションディレクトリの準備
          sudo rm -rf /var/www/my-web-2025
          sudo mkdir -p /var/www/my-web-2025

          # ファイルのコピー
          sudo cp -r ./* /var/www/my-web-2025/
          [ -d ".next" ] && sudo cp -r .next /var/www/my-web-2025/

          # 権限設定
          sudo chown -R $USER:www-data /var/www/my-web-2025
          sudo chmod -R 755 /var/www/my-web-2025

          # 5. 依存関係のインストール
          echo "=== Installing dependencies ==="
          cd /var/www/my-web-2025

          # npm 設定の最適化
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000

          npm ci --omit=dev --no-audit --no-fund --silent

          # 6. 環境変数の設定
          echo "=== Setting environment variables ==="
          cat > /tmp/env-config << 'ENV_EOF'
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          NODE_ENV=production
          PORT=3000
          ENV_EOF
          sudo cp /tmp/env-config .env.production.local

          # 7. アプリケーションの起動
          echo "=== Starting application ==="
          NODE_ENV=production pm2 start npm --name "my-web-2025" -- start
          pm2 save

          # 8. ヘルスチェック
          echo "=== Health check ==="
          sleep 5

          # PM2 状態確認
          if ! pm2 list | grep -q "my-web-2025.*online"; then
            echo "❌ Application failed to start"
            pm2 logs my-web-2025 --lines 20
            exit 1
          fi

          # ローカル接続確認
          if curl -f -s http://localhost:3000/ > /dev/null; then
            echo "✅ Application is responding on port 3000"
          else
            echo "⚠️ Application not responding on port 3000"
          fi

          # 9. クリーンアップ
          echo "=== Cleanup ==="
          rm -rf /tmp/my-web-2025-temp
          rm -f /tmp/deployment.tar.gz

          # 古いバックアップのクリーンアップ（7日以上前）
          find /var/www/backups -name "my-web-2025-*" -mtime +7 -exec sudo rm -rf {} \; 2>/dev/null || true

          echo "=== Deployment completed successfully ==="
          pm2 list

          EOF

      # デプロイ後の外部ヘルスチェック
      - name: External health check
        run: |
          echo "=== External health check ==="
          sleep 10

          # HTTP アクセステスト
          if curl -f -s -I http://${{ secrets.GCP_HOST }}/ > /dev/null; then
            echo "✅ HTTP access successful"
          else
            echo "❌ HTTP access failed"
            exit 1
          fi

          # HTTPS アクセステスト（設定されている場合）
          if curl -f -s -I https://yusuke-kim.com/ > /dev/null; then
            echo "✅ HTTPS access successful"
          else
            echo "⚠️ HTTPS access failed (may not be configured)"
          fi

      # 失敗時の自動ロールバック
      - name: Rollback on failure
        if: failure()
        run: |
          echo "=== Performing rollback ==="
          ssh deploy-server << 'EOF'
          LATEST_BACKUP=$(ls -t /var/www/backups/my-web-2025-* 2>/dev/null | head -1)

          if [ -n "$LATEST_BACKUP" ]; then
            echo "Rolling back to: $LATEST_BACKUP"
            
            # アプリケーション停止
            pm2 stop my-web-2025 2>/dev/null || true
            pm2 delete my-web-2025 2>/dev/null || true
            
            # バックアップから復元
            sudo rm -rf /var/www/my-web-2025
            sudo cp -r "$LATEST_BACKUP" /var/www/my-web-2025
            sudo chown -R $USER:www-data /var/www/my-web-2025
            
            # アプリケーション再起動
            cd /var/www/my-web-2025
            NODE_ENV=production pm2 start npm --name "my-web-2025" -- start
            pm2 save
            
            echo "✅ Rollback completed"
          else
            echo "❌ No backup found for rollback"
          fi
          EOF

      # SSH接続のクリーンアップ
      - name: Cleanup SSH connections
        if: always()
        run: |
          # ControlMaster 接続の終了
          ssh -O exit deploy-server 2>/dev/null || true
