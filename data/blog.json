{
  "items": [
    {
      "id": "nextjs-tailwind-modern-website",
      "type": "blog",
      "title": "Next.js + TailwindCSS v4でモダンなWebサイトを構築する方法",
      "description": "最新のNext.js 15とTailwindCSS v4を使って、効率的で保守性の高いWebサイトを構築する手法を詳しく解説します。",
      "slug": "nextjs-tailwind-modern-website",
      "category": "tutorials",
      "tags": ["Next.js", "TailwindCSS", "TypeScript", "モダンWeb開発"],
      "featuredImage": "/images/blog/nextjs-tailwind-thumb.jpg",
      "status": "published",
      "createdAt": "2025-01-01T00:00:00Z",
      "updatedAt": "2025-01-01T00:00:00Z", 
      "publishedAt": "2025-01-01T00:00:00Z",
      "content": "# Next.js + TailwindCSS v4でモダンなWebサイトを構築する方法\n\n最新のNext.js 15とTailwindCSS v4を組み合わせることで、効率的で保守性の高いWebサイトを構築できます。\n\n## 環境構築\n\n```bash\nnpx create-next-app@latest my-website --typescript --tailwind --eslint\ncd my-website\n```\n\n## TailwindCSS v4の設定\n\nTailwindCSS v4では、新しいエンジンにより大幅なパフォーマンス向上が期待できます...",
      "excerpt": "最新のNext.js 15とTailwindCSS v4を使った効率的な開発手法",
      "metadata": {
        "readTime": "10分",
        "difficulty": "中級",
        "updated": "2025-01-01"
      },
      "seo": {
        "title": "Next.js + TailwindCSS v4でモダンなWebサイトを構築する方法",
        "description": "最新のNext.js 15とTailwindCSS v4を使って、効率的で保守性の高いWebサイトを構築する手法を詳しく解説。",
        "keywords": ["Next.js", "TailwindCSS", "モダンWeb開発", "TypeScript"]
      }
    },
    {
      "id": "typescript-best-practices",
      "type": "blog", 
      "title": "TypeScript型定義のベストプラクティス",
      "description": "保守性の高いTypeScriptコードを書くための型設計のコツと、実践的なパターンを紹介します。",
      "slug": "typescript-best-practices",
      "category": "blog",
      "tags": ["TypeScript", "ベストプラクティス", "型設計", "コード品質"],
      "featuredImage": "/images/blog/typescript-best-practices-thumb.jpg",
      "status": "published",
      "createdAt": "2024-12-25T00:00:00Z",
      "updatedAt": "2024-12-25T00:00:00Z",
      "publishedAt": "2024-12-25T00:00:00Z",
      "content": "# TypeScript型定義のベストプラクティス\n\nTypeScriptを使って保守性の高いコードを書くためには、適切な型設計が重要です。\n\n## 基本的な型定義\n\n```typescript\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: Date;\n}\n```\n\n## ユニオン型の活用\n\n```typescript\ntype Status = 'pending' | 'approved' | 'rejected';\n```",
      "excerpt": "保守性の高いTypeScriptコードを書くための型設計",
      "metadata": {
        "readTime": "15分",
        "difficulty": "中級",
        "updated": "2024-12-25"
      },
      "seo": {
        "title": "TypeScript型定義のベストプラクティス",
        "description": "保守性の高いTypeScriptコードを書くための型設計のコツと、実践的なパターンを紹介。",
        "keywords": ["TypeScript", "ベストプラクティス", "型設計", "コード品質"]
      }
    },
    {
      "id": "react-component-design-patterns",
      "type": "blog",
      "title": "Reactコンポーネント設計パターン集",
      "description": "再利用可能で保守性の高いReactコンポーネントを作るための設計パターンと実装例を解説します。",
      "slug": "react-component-design-patterns",
      "category": "tutorials", 
      "tags": ["React", "コンポーネント設計", "設計パターン", "フロントエンド"],
      "featuredImage": "/images/blog/react-patterns-thumb.jpg",
      "status": "published",
      "createdAt": "2024-12-15T00:00:00Z",
      "updatedAt": "2024-12-20T00:00:00Z",
      "publishedAt": "2024-12-15T00:00:00Z",
      "content": "# Reactコンポーネント設計パターン集\n\n再利用可能で保守性の高いReactコンポーネントを作るための設計パターンを紹介します。\n\n## Compound Component Pattern\n\n```tsx\ninterface TabsProps {\n  children: React.ReactNode;\n  defaultTab?: string;\n}\n\nfunction Tabs({ children, defaultTab }: TabsProps) {\n  // 実装\n}\n```",
      "excerpt": "再利用可能で保守性の高いReactコンポーネントの設計パターン",
      "metadata": {
        "readTime": "20分",
        "difficulty": "上級",
        "updated": "2024-12-20"
      },
      "seo": {
        "title": "Reactコンポーネント設計パターン集",
        "description": "再利用可能で保守性の高いReactコンポーネントを作るための設計パターンと実装例を解説。",
        "keywords": ["React", "コンポーネント設計", "設計パターン", "フロントエンド"]
      }
    }
  ],
  "categories": [
    {
      "id": "blog",
      "name": "ブログ",
      "description": "技術記事、開発日記、知見の共有"
    },
    {
      "id": "tutorials", 
      "name": "チュートリアル",
      "description": "実践的な技術解説・ハンズオン"
    },
    {
      "id": "resources",
      "name": "リソース・Tips",
      "description": "便利なツール、コード片、設定方法"
    }
  ]
}